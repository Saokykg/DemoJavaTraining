openapi: 3.0.3
info:
  title: Swagger Petstore - OpenAPI 3.0
  description: >-
    Solr is an open-source search platform that allows you to easily create and
    manage search applications. It is built on top of Apache Lucene, a powerful
    and high-performance Java search engine library.


    Solr 8.11 provides a RESTful API that allows developers to interact with
    Solr using standard HTTP requests. One way to interact with the Solr API is
    through Swagger UI, a graphical interface that allows you to explore and
    test the Solr API.


    The Solr 8.11 Swagger API provides documentation for the Solr REST API,
    allowing developers to easily understand and use the API. The API is
    organized by resource and method, and each resource and method is described
    with detailed documentation, including input parameters, output formats, and
    examples.


    With the Solr 8.11 Swagger API, developers can quickly build powerful search
    applications that can search, index, and analyze large amounts of data with
    ease. The API also provides advanced features such as faceting,
    highlighting, and spatial search, making it a powerful tool for building
    search applications.
  version: 1.0.11
servers:
  - url: https://replace_host_url
tags:
  - name: Collection Aliasing
    description: >-
      A collection alias is a virtual collection which Solr treats the same as a normal collection. The alias collection may point to one or more real collections.

      Some use cases for collection aliasing:
      
      - Time series data
        
      - Reindexing content behind the scenes
    externalDocs:
      description: Find out more
      url: https://solr.apache.org/guide/8_11/collection-aliasing.html
  - name: Shard Management
    description: >-
      In SolrCloud, a shard is a logical partition of a collection. This partition stores part of the entire index for a collection.

      The number of shards you have helps to determine how many documents a single collection can contain in total, and also impacts search performance.
    externalDocs:
      description: Find out more
      url: https://solr.apache.org/guide/8_11/shard-management.html#splitshard
components:
  securitySchemes:
    auth:
      type: apiKey
      in: header
      name: Authorization
security:
  - auth: []
paths:
  /admin/collections?action=SPLITSHARD:
    get:
      tags:
      - Collection Aliasing
      summary: Split a Shard
      description: |
        The shard splitting API command in SolrCloud allows an existing shard to be broken into two new shards, while still accepting query and indexing requests. The new shards will have the same number of replicas as the original shard. A soft commit is automatically issued after the split operation, so documents are visible on sub-shards. An explicit commit is not necessary as the index is automatically persisted to disk. The split is performed by dividing the original shard's hash range into two equal partitions and dividing up the documents accordingly. The API allows for further control over how the split occurs with the ranges and split.key parameters. The newly created shards will have as many replicas as the parent shard of the same replica types. The node running the leader of the parent shard needs to have enough free disk space for the split to succeed, especially when using splitMethod=rewrite. The first replicas of the resulting sub-shards will always be placed on the shard leader node, which may cause Autoscaling policy violations. As shard splitting can be a long-running process, it's recommended to run it as an asynchronous call to avoid timeouts.
      operationId: splitShard
      parameters: 
        - name: name
          in: collection
          description: |
            The name of the collection that includes the shard to be split. This parameter is required.
          required: true
          schema:
            type: string
        - name: shard
          in: query
          description: |
            The name of the shard to be split. This parameter is required when split.key is not specified.
          required: true
          schema:
            type: string
        - name: ranges
          in: query
          description: |
            A comma-separated list of hash ranges in hexadecimal, such as ranges=0-1f4,1f5-3e8,3e9-5dc.
            
            This parameter can be used to divide the original shard’s hash range into arbitrary hash range intervals specified in hexadecimal. For example, if the original hash range is 0-1500 then adding the parameter: ranges=0-1f4,1f5-3e8,3e9-5dc will divide the original shard into three shards with hash range 0-500, 501-1000, and 1001-1500 respectively.
          required: true
          schema:
            type: string
        - name: split.key
          in: query
          description: |
            The key to use for splitting the index.

            This parameter can be used to split a shard using a route key such that all documents of the specified route key end up in a single dedicated sub-shard. Providing the shard parameter is not required in this case because the route key is enough to figure out the right shard. A route key which spans more than one shard is not supported.
          required: true
          schema:
            type: string
        - name: numSubShards
          in: query
          description: |
            The number of sub-shards to split the parent shard into. Allowed values for this are in the range of 2-8 and defaults to 2.
            
            This parameter can only be used when ranges or split.key are not specified.
          required: true
          schema:
            type: string
        - name: splitMethod
          in: query
          description: |
            Currently two methods of shard splitting are supported:
            
            - splitMethod=rewrite (default) after selecting documents to retain in each partition this method creates sub-indexes from scratch, which is a lengthy CPU- and I/O-intensive process but results in optimally-sized sub-indexes that don’t contain any data from documents not belonging to each partition.
            
            - splitMethod=link uses file system-level hard links for creating copies of the original index files and then only modifies the file that contains the list of deleted documents in each partition. This method is many times quicker and lighter on resources than the rewrite method but the resulting sub-indexes are still as large as the original index because they still contain data from documents not belonging to the partition. This slows down the replication process and consumes more disk space on replica nodes (the multiple hard-linked copies don’t occupy additional disk space on the leader node, unless hard-linking is not supported).
          required: true
          schema:
            type: string
        - name: splitFuzz
          in: query
          description: |
            A float value (default is 0.0f, must be smaller than 0.5f) that allows to vary the sub-shard ranges by this percentage of total shard range, odd shards being larger and even shards being smaller.
          required: true
          schema:
            type: string
        - name: property.name=value
          in: query
          description: |
            Set core property name to value. See the section Defining core.properties for details on supported properties and values.
          required: true
          schema:
            type: string
        - name: waitForFinalState
          in: query
          description: |
            If true, the request will complete only when all affected replicas become active. The default is false, which means that the API will return the status of the single action, which may be before the new replica is online and active.
          required: true
          schema:
            type: boolean
        - name: timing
          in: query
          description: |
            If true then each stage of processing will be timed and a timing section will be included in response.
          required: true
          schema:
            type: boolean
        - name: async
          in: query
          description: |
            Request ID to track this action which will be processed asynchronously
          required: true
          schema:
            type: string
        - name: splitByPrefix
          in: query
          description: |
            If true, the split point will be selected by taking into account the distribution of compositeId values in the shard. A compositeId has the form <prefix>!<suffix>, where all documents with the same prefix are colocated on in the hash space. If there are multiple prefixes in the shard being split, then the split point will be selected to divide up the prefixes into as equal sized shards as possible without splitting any prefix. If there is only a single prefix in a shard, the range of the prefix will be divided in half.

            The id field is usually scanned to determine the number of documents with each prefix. As an optimization, if an optional field called id_prefix exists and has the document prefix indexed (including the !) for each document, then that will be used to generate the counts.
          required: true
          schema:
            type: boolean
      responses:
        '200':
          description: Successful operation
        '400':
          description: Bad request
        '404':
          description: Not found
        '405':
          description: Validation exception
  /admin/collections?action=ALIASPROP:
    get:
      tags:
      - Collection Aliasing
      summary: Modify Alias Properties for a Collection
      description: |
        The ALIASPROP action modifies the properties (metadata) on an alias. If a key is set with a value that is empty it will be removed.
      operationId: aliasProp
      parameters:
        - name: name
          in: query
          description: |
            The alias name on which to set properties. This parameter is required.
          required: true
          schema:
            type: string
        - name: property.*
          in: query
          description: |
            The name of the property to be modified replaces '*', the value for the parameter is passed as the value for the property.
          required: false
          schema:
            type: string
        - name: async
          in: query
          description: |
            Request ID to track this action which will be processed asynchronously.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '400':
          description: Bad request
        '404':
          description: Not found
        '405':
          description: Validation exception
  /admin/collections?action=CREATESHARD:
    get:
      tags:
      - Collection Aliasing
      summary: Create a Shard
      description: |
        Shards can only created with this API for collections that use the 'implicit' router (i.e., when the collection was created, router.name=implicit). A new shard with a name can be created for an existing 'implicit' collection.
      operationId: createShard
      parameters:
        - name: collection
          in: query
          description: |
            The name of the collection that includes the shard to be split. This parameter is required.
          required: true
          schema:
            type: string
        - name: shard
          in: query
          description: |
            The name of the shard to be created. This parameter is required.
          required: false
          schema:
            type: string
        - name: createNodeSet
          in: query
          description: |
            Allows defining the nodes to spread the new collection across. If not provided, the CREATESHARD operation will create shard-replica spread across all live Solr nodes.

            The format is a comma-separated list of node_names, such as localhost:8983_solr,localhost:8984_solr,localhost:8985_solr.
          required: false
          schema:
            type: string
        - name: nrtReplicas
          in: query
          description: |
            The number of nrt replicas that should be created for the new shard (optional, the defaults for the collection is used if omitted)
          required: false
          schema:
            type: string
        - name: tlogReplicas
          in: query
          description: |
            The number of tlog replicas that should be created for the new shard (optional, the defaults for the collection is used if omitted)
          required: false
          schema:
            type: string
        - name: pullReplicas
          in: query
          description: |
            The number of pull replicas that should be created for the new shard (optional, the defaults for the collection is used if omitted)
          required: false
          schema:
            type: string
        - name: property.name=value
          in: query
          description: |
            Set core property name to value. See the section Defining core.properties for details on supported properties and values.
          required: false
          schema:
            type: string
        - name: waitForFinalState
          in: query
          description: |
            If true, the request will complete only when all affected replicas become active. The default is false, which means that the API will return the status of the single action, which may be before the new replica is online and active.
          required: false
          schema:
            type: boolean
        - name: async
          in: query
          description: |
            Request ID to track this action which will be processed asynchronously.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '400':
          description: Bad request
        '404':
          description: Not found
        '405':
          description: Validation exception
  /admin/collections?action=DELETESHARD:
    get:
      tags:
      - Collection Aliasing
      summary: Delete a Shard
      description: |
        Deleting a shard will unload all replicas of the shard, remove them from clusterstate.json, and (by default) delete the instanceDir and dataDir for each replica. It will only remove shards that are inactive, or which have no range given for custom sharding.
      operationId: deleteShard
      parameters:
        - name: collection
          in: query
          description: |
            The name of the collection that includes the shard to be deleted. This parameter is required.
          required: true
          schema:
            type: string
        - name: shard
          in: query
          description: |
            The name of the shard to be deleted. This parameter is required.
          required: true
          schema:
            type: string
        - name: deleteInstanceDir
          in: query
          description: |
            By default Solr will delete the entire instanceDir of each replica that is deleted. Set this to false to prevent the instance directory from being deleted.
          required: false
          schema:
            type: string
        - name: deleteDataDir
          in: query
          description: |
            By default Solr will delete the dataDir of each replica that is deleted. Set this to false to prevent the data directory from being deleted.
          required: false
          schema:
            type: string
        - name: deleteIndex
          in: query
          description: |
            By default Solr will delete the index of each replica that is deleted. Set this to false to prevent the index directory from being deleted.
          required: false
          schema:
            type: string
        - name: async
          in: query
          description: |
            Request ID to track this action which will be processed asynchronously.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '400':
          description: Bad request
        '404':
          description: Not found
        '405':
          description: Validation exception
