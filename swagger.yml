openapi: 3.0.3
info:
  title: Swagger Petstore - OpenAPI 3.0
  description: >-
    Solr is an open-source search platform that allows you to easily create and
    manage search applications. It is built on top of Apache Lucene, a powerful
    and high-performance Java search engine library.


    Solr 8.11 provides a RESTful API that allows developers to interact with
    Solr using standard HTTP requests. One way to interact with the Solr API is
    through Swagger UI, a graphical interface that allows you to explore and
    test the Solr API.


    The Solr 8.11 Swagger API provides documentation for the Solr REST API,
    allowing developers to easily understand and use the API. The API is
    organized by resource and method, and each resource and method is described
    with detailed documentation, including input parameters, output formats, and
    examples.


    With the Solr 8.11 Swagger API, developers can quickly build powerful search
    applications that can search, index, and analyze large amounts of data with
    ease. The API also provides advanced features such as faceting,
    highlighting, and spatial search, making it a powerful tool for building
    search applications.
  version: 1.0.11
servers:
  - url: https://replace_host_url
tags:
  - name: Cluster and Node Management
    description: >-
      A cluster is a set of Solr nodes operating in coordination with each other.

      These API commands work with a SolrCloud cluster at the entire cluster level, or on individual nodes.
    externalDocs:
      description: Find out more
      url: https://solr.apache.org/guide/8_11/cluster-node-management.html
components:
  securitySchemes:
    auth:
      type: apiKey
      in: header
      name: Authorization
security:
  - auth: []
paths:
  /admin/collections?action=CLUSTERSTATUS:
    get:
      tags:
        - Cluster and Node Management
      summary: Cluster Status
      description: |
        Fetch the cluster status including collections, shards, replicas, configuration name as well as collection aliases and cluster properties.
        
        Additionally, this command reports a health status of each collection and shard, in order to make it easier to monitor the operational state of the collections. The following health state values are defined, ordered from the best to worst, based on the percentage of active replicas (active):

        GREEN active == 100%, all replicas are active and there’s a shard leader.
        
        YELLOW 100% > active > 50%, AND there’s a shard leader.
        
        ORANGE 50% >= active > 0%, AND there’s a shard leader.
        
        RED No active replicas OR there’s no shard leader.
        
        The collection health state is reported as the worst state of any shard, e.g., for a collection with all shards GREEN except for one YELLOW the collection health will be reported as YELLOW.
      operationId: clusterStatus
      parameters:
        - name: collection
          in: query
          description: |
            The collection or alias name for which information is requested. If omitted, information on all collections in the cluster will be returned. If an alias is supplied, information on the collections in the alias will be returned.
          required: true
          schema:
            type: string
        - name: shard
          in: query
          description: |
            The shard(s) for which information is requested. Multiple shard names can be specified as a comma-separated list.
          required: false
          schema:
            type: string
        - name: _route_
          in: query
          description: >
            This can be used if you need the details of the shard where a particular document belongs to and you don’t know which shard it falls under.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '400':
          description: Bad request
        '404':
          description: Not found
        '405':
          description: Validation exception
  /admin/collections?action=CLUSTERPROP:
    get:
      tags:
        - Cluster and Node Management
      summary: Cluster Properties
      description: |
        Add, edit or delete a cluster-wide property.
      operationId: clusterProperties
      parameters:
        - name: name
          in: query
          description: |
            The name of the property. Supported properties names are autoAddReplicas, legacyCloud, location, maxCoresPerNode, urlScheme, and defaultShardPreferences. If the Jaeger tracing contrib has been enabled, the property samplePercentage is also available.
            
            Other properties can be set (for example, if you need them for custom plugins) but they must begin with the prefix ext.. Unknown properties that don’t begin with ext. will be rejected.
          required: true
          schema:
            type: string
        - name: val
          in: query
          description: |
            The value of the property. If the value is empty or null, the property is unset.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '400':
          description: Bad request
        '404':
          description: Not found
        '405':
          description: Validation exception
  /admin/collections?action=BALANCESHARDUNIQUE:
    get:
      tags:
        - Cluster and Node Management
      summary: Balance a Property Across Nodes
      description: |
        Insures that a particular property is distributed evenly amongst the physical nodes that make up a collection. If the property already exists on a replica, every effort is made to leave it there. If the property is not on any replica on a shard, one is chosen and the property is added.
      operationId: balanceShardUnique
      parameters:
        - name: collection
          in: query
          description: |
            The name of the collection to balance the property in. This parameter is required.
          required: true
          schema:
            type: string
        - name: property
          in: query
          description: |
            The property to balance. The literal property. is prepended to this property if not specified explicitly. This parameter is required.
          required: true
          schema:
            type: string
        - name: onlyactivenodes
          in: query
          description: |
            Defaults to true. Normally, the property is instantiated on active nodes only. If this parameter is specified as false, then inactive nodes are also included for distribution.
          required: false
          schema:
            type: boolean
        - name: shardUnique
          in: query
          description: |
            Something of a safety valve. There is one pre-defined property (preferredLeader) that defaults this value to true. For all other properties that are balanced, this must be set to true or an error message will be returned.
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: Successful operation
        '400':
          description: Bad request
        '404':
          description: Not found
        '405':
          description: Validation exception
  /admin/collections?action=UTILIZENODE:
    get:
      tags:
        - Cluster and Node Management
      summary: Utilize a New Node
      description: |
        This command can be used to move some replicas from the existing nodes to either a new node or a less loaded node to reduce the load on the existing node.

        This uses your autoscaling policies and preferences to identify which replica needs to be moved. It tries to fix any policy violations first and then it tries to move some load off of the most loaded nodes according to the preferences.
      operationId: balanceShardUnique
      parameters:
        - name: node
          in: query
          description: |
            The name of the node that needs to be utilized. This parameter is required.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '400':
          description: Bad request
        '404':
          description: Not found
        '405':
          description: Validation exception
  /admin/collections?action=REPLACENODE:
    get:
      tags:
        - Cluster and Node Management
      summary: Move All Replicas in a Node to Another
      description: |
        This command recreates replicas in one node (the source) to another node(s) (the target). After each replica is copied, the replicas in the source node are deleted.

        For source replicas that are also shard leaders the operation will wait for the number of seconds set with the timeout parameter to make sure there’s an active replica that can become a leader (either an existing replica becoming a leader or the new replica completing recovery and becoming a leader).
        
        The API uses the Autoscaling framework to find nodes that can satisfy the disk requirements for the new replicas but only when an Autoscaling policy is configured.
      operationId: replaceNode
      parameters:
        - name: sourceNode
          in: query
          description: |
            The source node from which the replicas need to be copied from. This parameter is required.
          required: true
          schema:
            type: string
        - name: targetNode
          in: query
          description: |
            The target node where replicas will be copied. If this parameter is not provided, Solr will identify nodes automatically based on policies or number of cores in each node.
          required: false
          schema:
            type: string
        - name: parallel
          in: query
          description: |
            If this flag is set to true, all replicas are created in separate threads. Keep in mind that this can lead to very high network and disk I/O if the replicas have very large indices. The default is false.
          required: false
          schema:
            type: boolean
        - name: async
          in: query
          description: |
            Request ID to track this action which will be processed asynchronously.
          required: false
          schema:
            type: string
        - name: timeout
          in: query
          description: |
            Time in seconds to wait until new replicas are created, and until leader replicas are fully recovered. The default is 300, or 5 minutes.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '400':
          description: Bad request
        '404':
          description: Not found
        '405':
          description: Validation exception
  /admin/collections?action=DELETENODE:
    get:
      tags:
        - Cluster and Node Management
      summary: Delete Replicas in a Node Another
      description: |
        Deletes all replicas of all collections in that node. Please note that the node itself will remain as a live node after this operation.
      operationId: deleteNode
      parameters:
        - name: node
          in: query
          description: |
            The node to be removed. This parameter is required.
          required: true
          schema:
            type: string
        - name: async
          in: query
          description: |
            Request ID to track this action which will be processed asynchronously.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '400':
          description: Bad request
        '404':
          description: Not found
        '405':
          description: Validation exception
  /admin/collections?action=ADDROLE:
    get:
      tags:
        - Cluster and Node Management
      summary: Add a Role
      description: |
       Assigns a role to a given node in the cluster. The only supported role is overseer.

        Use this command to dedicate a particular node as Overseer. Invoke it multiple times to add more nodes. This is useful in large clusters where an Overseer is likely to get overloaded. If available, one among the list of nodes which are assigned the 'overseer' role would become the overseer. The system would assign the role to any other node if none of the designated nodes are up and running.
      operationId: addRole
      parameters:
        - name: role
          in: query
          description: |
            The name of the role. The only supported role as of now is overseer. This parameter is required.
          required: true
          schema:
            type: string
        - name: node
          in: query
          description: |
            The name of the node that will be assigned the role. It is possible to assign a role even before that node is started. This parameter is started.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '400':
          description: Bad request
        '404':
          description: Not found
        '405':
          description: Validation exception
  /admin/collections?action=REMOVEROLE:
    get:
      tags:
        - Cluster and Node Management
      summary: Remove Role
      description: |
       Remove an assigned role. This API is used to undo the roles assigned using ADDROLE operation
      operationId: removeRole
      parameters:
        - name: role
          in: query
          description: |
            The name of the role. The only supported role as of now is overseer. This parameter is required.
          required: true
          schema:
            type: string
        - name: node
          in: query
          description: |
            The name of the node where the role should be removed.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '400':
          description: Bad request
        '404':
          description: Not found
        '405':
          description: Validation exception
  /admin/collections?action=OVERSEERSTATUS:
    get:
      tags:
        - Cluster and Node Management
      summary: Overseer Status and Statistics
      description: |
       Returns the current status of the overseer, performance statistics of various overseer APIs, and the last 10 failures per operation type.
      operationId: overseerStatus
      responses:
        '200':
          description: Successful operation
        '400':
          description: Bad request
        '404':
          description: Not found
        '405':
          description: Validation exception
  /admin/collections?action=MIGRATESTATEFORMAT:
    get:
      tags:
        - Cluster and Node Management
      summary: Migrate Cluster State
      description: |
       A expert level utility API to move a collection from shared clusterstate.json ZooKeeper node (created with stateFormat=1, the default in all Solr releases prior to 5.0) to the per-collection state.json stored in ZooKeeper (created with stateFormat=2, the current default) seamlessly without any application down-time.
      operationId: migrateStateFormat
      parameters:
        - name: collection
          in: query
          description: |
            The name of the collection to be migrated from clusterstate.json to its own state.json ZooKeeper node. This parameter is required.
          required: true
          schema:
            type: string
        - name: async
          in: query
          description: |
            Request ID to track this action which will be processed asynchronously.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '400':
          description: Bad request
        '404':
          description: Not found
        '405':
          description: Validation exception
